{"version":3,"sources":["webpack:///path---blog-continuations-and-javascript-5b48a3fb0a41d6ee7192.js","webpack:///./.cache/json/blog-continuations-and-javascript.json"],"names":["webpackJsonp","370","module","exports","data","markdownRemark","html","frontmatter","date","path","title","tags","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,utNAAk1KC,aAA25CC,KAAA,iBAAAC,KAAA,qCAAAC,MAAA,6CAAAC,MAAA,uBAAuJC","file":"path---blog-continuations-and-javascript-5b48a3fb0a41d6ee7192.js","sourcesContent":["webpackJsonp([28927685275597],{\n\n/***/ 370:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>By definition, a computer program is a collection of instructions that are\\ndesigned to perform a specific task. It is inherently important for a\\ndeveloper to understand each individual instruction or step the program has to\\ntake in order to reach its goal correctly. Naturally, it can be valuable to a\\ndeveloper to have more control over these instruction depending on the program\\nat hand. When the program is executing some specific instruction, the\\ncollection of steps that still need to be processed in order for the program to\\ncomplete a computation is known as a continuation. Some languages are able to\\nprovide its users this ability to treat continuations as first class features,\\nwhile some other languages require its users to implement them manually.\\nRegardless of the kind of program being created, continuations can always be a\\nvaluable concept and tool for a developer to understand in order to be equipped\\nto build smart and sound programs.</p>\\n<h2>Continuation-Passing Style</h2>\\n<p>Using continuations to your advantage within computer programs can yield\\npowerful results. A common method for using continuations is known as\\ncontinuation-passing style. In the continuation-passing style paradigm, control\\nis within the program is passed explicitly by continuations. This is in\\ndirect contrast to more widely used styles of programming such as direct style.\\nThe direct style of programming is can generally be described as synchronous\\nprogramming, in which continuations are passed implicitly by just advancing to\\nthe next line of the program. While some languages in particular have native\\nsupport for continuations, such that continuations are treated as first class\\nfeatures, other languages are still able to implement their own interpretation\\nof continuation-passing style so long as they have the right tools to do so. In\\norder for a language to properly implement continuation-passing style, the\\nlanguage needs to be able to support closures and proper tail calls. This\\nis due to the fact that for continuation-passing style to work properly, the\\nlanguage needs to be able to manually create continuations which can be\\nimplemented as non-returning functions that are able to encapsulate the\\nrespective name bindings within its lexical scope, and be able to support\\nfunctions that are able to call other functions at the very end of themselves.</p>\\n<p>One way to implement continuation-passing style into a program is to have a\\nfunction which takes in an additional argument of another function, which\\nrepresents the continuation. When the first function completes its execution,\\ninstead of returning the result of the procedure, it instead passes this result\\ninto the continuation, thus advancing the program with its product. In\\ncontrast, the direct style of programming would rather return the result of the\\nfunction back to the caller in order to further advance the program, while with\\nthe continuation-passing style, the next set of instructions for the program is\\nbeing called with the result of the function when its ready.</p>\\n<h2>Continuations in JavaScript</h2>\\n<p>JavaScript is a great example of a language that doesn’t have first class\\ncontinuations, but in many cases requires continuation-passing style to be\\nsupported in order to perform many of the useful tasks that this language is\\noften times expected to be able to do. In JavaScript, manual continuations are\\nsimple to write since the language supports closures, and continuation-passing\\nstyle is also easily implemented since the language naturally supports proper\\ntail calls. By simply passing in a function argument, which represents the\\ncontinuation of the program, to another function, which represents the current\\nprocess being executed, we’re able to pass the result of the current function\\ninto the continuation and invoke it at the very end of the current function,\\nhence advancing the program in a continuation-passing style.</p>\\n<p>For JavaScript related software development, continuation-passing style is a\\nvery important topic, primarily due to the fact that JavaScript itself is\\nsingle threaded. This means that all of the programs being run on an instance\\nof a JavaScript runtime engine is done so on a single thread, which implies\\nthat any halt or waiting that must occur within a given JavaScript process will\\nhalt the entire program. This problem is clearly noticeable for any IO related\\ntasks that involve some JavaScript program waiting on some input before it can\\ncomplete a task. Continuation-passing style solves this single threaded problem\\nby deferring the continuation of the program to be executed when its ready,\\nrather than having to freeze the entire program waiting for it to be ready.\\nThis approach is widely used, and is quite necessary, for asynchronous\\nprogramming in not just JavaScript applications, but any program that might use\\nthis method of programming. Asynchronous procedures are programs that run\\nindependently of the main thread or process in a non-blocking manner. This\\nprocess might be reminiscent of multithreading, however asynchronous programs\\ncan be implemented by alternative means, therefore making them very different;\\nfor example, JavaScript supports asynchronous methods and JavaScript runtime\\nengines are single threaded.</p>\\n<p>The concept of asynchronous programming inherently lends itself to\\ncontinuation-passing style; if a program is running independently of the main\\nthread, how will the main program know when it has finished? The most common\\nanswer to this problem is to implement continuation-passing style for\\nasynchronous functions. The idea is to pass in the continuation of the program\\nto the asynchronous function, and once the function has completed its process,\\nthe result is then passed as an argument into the continuation, and the program\\ncan advance. All of this can occur without the program having to halt, since we\\naren’t waiting for the call to finish to continue running the program, but\\nrather just giving the asynchronous call a set of instructions to perform with\\nits result once it has completed.</p>\\n<h2>In Closing</h2>\\n<p>Being able to have control over the state of a given program can be a very\\nuseful advantage for a developer to have. Even in cases where continuations\\naren’t required in order to build a program, they still provide an alternative\\nway of thinking and going about certain problems. Continuations can also help\\nsolve programming efficiency problems, like in the case of asynchronous\\nJavaScript programming, where we would otherwise have impractical alternatives.\\nTherefore, regardless of the kind of program being created, continuations can\\nalways be a valuable concept and tool for a developer to understand in order to\\nbe equipped to build smart and sound programs.</p>\",\"frontmatter\":{\"date\":\"March 09, 2018\",\"path\":\"/blog/continuations-and-javascript\",\"title\":\"Continuations and Their Role In JavaScript\",\"tags\":[\"paper\",\"language\"]}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---blog-continuations-and-javascript-5b48a3fb0a41d6ee7192.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>By definition, a computer program is a collection of instructions that are\\ndesigned to perform a specific task. It is inherently important for a\\ndeveloper to understand each individual instruction or step the program has to\\ntake in order to reach its goal correctly. Naturally, it can be valuable to a\\ndeveloper to have more control over these instruction depending on the program\\nat hand. When the program is executing some specific instruction, the\\ncollection of steps that still need to be processed in order for the program to\\ncomplete a computation is known as a continuation. Some languages are able to\\nprovide its users this ability to treat continuations as first class features,\\nwhile some other languages require its users to implement them manually.\\nRegardless of the kind of program being created, continuations can always be a\\nvaluable concept and tool for a developer to understand in order to be equipped\\nto build smart and sound programs.</p>\\n<h2>Continuation-Passing Style</h2>\\n<p>Using continuations to your advantage within computer programs can yield\\npowerful results. A common method for using continuations is known as\\ncontinuation-passing style. In the continuation-passing style paradigm, control\\nis within the program is passed explicitly by continuations. This is in\\ndirect contrast to more widely used styles of programming such as direct style.\\nThe direct style of programming is can generally be described as synchronous\\nprogramming, in which continuations are passed implicitly by just advancing to\\nthe next line of the program. While some languages in particular have native\\nsupport for continuations, such that continuations are treated as first class\\nfeatures, other languages are still able to implement their own interpretation\\nof continuation-passing style so long as they have the right tools to do so. In\\norder for a language to properly implement continuation-passing style, the\\nlanguage needs to be able to support closures and proper tail calls. This\\nis due to the fact that for continuation-passing style to work properly, the\\nlanguage needs to be able to manually create continuations which can be\\nimplemented as non-returning functions that are able to encapsulate the\\nrespective name bindings within its lexical scope, and be able to support\\nfunctions that are able to call other functions at the very end of themselves.</p>\\n<p>One way to implement continuation-passing style into a program is to have a\\nfunction which takes in an additional argument of another function, which\\nrepresents the continuation. When the first function completes its execution,\\ninstead of returning the result of the procedure, it instead passes this result\\ninto the continuation, thus advancing the program with its product. In\\ncontrast, the direct style of programming would rather return the result of the\\nfunction back to the caller in order to further advance the program, while with\\nthe continuation-passing style, the next set of instructions for the program is\\nbeing called with the result of the function when its ready.</p>\\n<h2>Continuations in JavaScript</h2>\\n<p>JavaScript is a great example of a language that doesn’t have first class\\ncontinuations, but in many cases requires continuation-passing style to be\\nsupported in order to perform many of the useful tasks that this language is\\noften times expected to be able to do. In JavaScript, manual continuations are\\nsimple to write since the language supports closures, and continuation-passing\\nstyle is also easily implemented since the language naturally supports proper\\ntail calls. By simply passing in a function argument, which represents the\\ncontinuation of the program, to another function, which represents the current\\nprocess being executed, we’re able to pass the result of the current function\\ninto the continuation and invoke it at the very end of the current function,\\nhence advancing the program in a continuation-passing style.</p>\\n<p>For JavaScript related software development, continuation-passing style is a\\nvery important topic, primarily due to the fact that JavaScript itself is\\nsingle threaded. This means that all of the programs being run on an instance\\nof a JavaScript runtime engine is done so on a single thread, which implies\\nthat any halt or waiting that must occur within a given JavaScript process will\\nhalt the entire program. This problem is clearly noticeable for any IO related\\ntasks that involve some JavaScript program waiting on some input before it can\\ncomplete a task. Continuation-passing style solves this single threaded problem\\nby deferring the continuation of the program to be executed when its ready,\\nrather than having to freeze the entire program waiting for it to be ready.\\nThis approach is widely used, and is quite necessary, for asynchronous\\nprogramming in not just JavaScript applications, but any program that might use\\nthis method of programming. Asynchronous procedures are programs that run\\nindependently of the main thread or process in a non-blocking manner. This\\nprocess might be reminiscent of multithreading, however asynchronous programs\\ncan be implemented by alternative means, therefore making them very different;\\nfor example, JavaScript supports asynchronous methods and JavaScript runtime\\nengines are single threaded.</p>\\n<p>The concept of asynchronous programming inherently lends itself to\\ncontinuation-passing style; if a program is running independently of the main\\nthread, how will the main program know when it has finished? The most common\\nanswer to this problem is to implement continuation-passing style for\\nasynchronous functions. The idea is to pass in the continuation of the program\\nto the asynchronous function, and once the function has completed its process,\\nthe result is then passed as an argument into the continuation, and the program\\ncan advance. All of this can occur without the program having to halt, since we\\naren’t waiting for the call to finish to continue running the program, but\\nrather just giving the asynchronous call a set of instructions to perform with\\nits result once it has completed.</p>\\n<h2>In Closing</h2>\\n<p>Being able to have control over the state of a given program can be a very\\nuseful advantage for a developer to have. Even in cases where continuations\\naren’t required in order to build a program, they still provide an alternative\\nway of thinking and going about certain problems. Continuations can also help\\nsolve programming efficiency problems, like in the case of asynchronous\\nJavaScript programming, where we would otherwise have impractical alternatives.\\nTherefore, regardless of the kind of program being created, continuations can\\nalways be a valuable concept and tool for a developer to understand in order to\\nbe equipped to build smart and sound programs.</p>\",\"frontmatter\":{\"date\":\"March 09, 2018\",\"path\":\"/blog/continuations-and-javascript\",\"title\":\"Continuations and Their Role In JavaScript\",\"tags\":[\"paper\",\"language\"]}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/blog-continuations-and-javascript.json\n// module id = 370\n// module chunks = 28927685275597"],"sourceRoot":""}